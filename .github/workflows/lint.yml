name: Linting
on:
  push:
    branches: [main, develop, gh-actions]
    paths:
      - ".cargo/config.toml"
      - ".github/workflows/lint.yml"
      - ".github/actions/**"
      - "**.rs" # Include all rust files
      - "**Cargo.toml" # Include all Cargo.toml files
      - "**Cargo.lock" # Include all Cargo.lock files
  pull_request:
    branches: [main, develop, gh-actions]
    paths:
      - ".cargo/config.toml"
      - ".github/workflows/lint.yml"
      - ".github/actions/**"
      - "**.rs" # Include all rust files
      - "**Cargo.toml" # Include all Cargo.toml files
      - "**Cargo.lock" # Include all Cargo.lock files

defaults:
  run:
    working-directory: sdk

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_INCREMENTAL: 0

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: write
      pull-requests: write
      repository-projects: write

    steps:
      - name: Checkout the Source Code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Rust
        uses: ./.github/actions/setup-rust
        with:
          toolchain: beta
          components: clippy

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --all-targets --manifest-path ./sdk/Cargo.toml -- --deny warnings
          name: Clippy Results for the Rust Core

  check-unused-deps:
    name: Check Unused Dependencies
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the Source Code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Rust
        uses: ./.github/actions/setup-rust
        with:
          toolchain: nightly
          install: cargo-udeps

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Cargo Udeps
        run: cargo ci-udeps

  check-format:
    name: Check Format
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the Source Code
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: ./.github/actions/setup-rust
        with:
          toolchain: nightly
          components: rustfmt

      - name: Install cargo-license-template
        run: cargo install --force cargo-license-template

      - name: Run Cargo Fmt
        run: cargo ci-fmt

  check-docs:
    name: Check Documentation
    runs-on: ubuntu-latest
    env:
      RUSTDOCFLAGS: -D warnings

    steps:
      - name: Checkout the Source Code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Rust
        uses: ./.github/actions/setup-rust
        with:
          toolchain: nightly
          components: rustfmt

      - name: Run cargo-doc
        working-directory: ./sdk
        run: cargo doc --all-features --no-deps --document-private-items -p demia_sdk --lib

  types:
    name: Check types-only compilation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the Source Code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Rust
        uses: ./.github/actions/setup-rust

      - name: Check
        run: cargo ci-check-types
